// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          String    @default("customer") // customer, admin
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  wishlistItems WishlistItem[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String
  shortDescription String  @map("short_description")
  price           Float
  originalPrice   Float?   @map("original_price")
  images          String[] // Array of image URLs
  category        String
  rating          Float    @default(0)
  reviewCount     Int      @default(0) @map("review_count")
  inStock         Boolean  @default(true) @map("in_stock")
  stockQuantity   Int      @default(0) @map("stock_quantity")
  sku             String   @unique
  tags            String[]
  isNew           Boolean  @default(false) @map("is_new")
  isBestSeller    Boolean  @default(false) @map("is_best_seller")
  ingredients     String?
  howToUse        String?  @map("how_to_use")
  benefits        String[]
  
  // Variants
  variants        ProductVariant[]
  
  // Relations
  orderItems      OrderItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  name      String   // e.g., "30ml", "50ml", "Red", "Blue"
  price     Float?
  inStock   Boolean  @default(true) @map("in_stock")
  sku       String?  @unique

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_variants")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique @map("order_number") // Human-readable: ORD-001
  userId          String?       @map("user_id") // Can be null for guest orders
  status          OrderStatus   @default(pending)
  paymentStatus   PaymentStatus @default(pending) @map("payment_status")
  paymentMethod   String        @map("payment_method") // credit-card, paypal, etc.
  subtotal        Float
  shipping        Float         @default(0)
  tax             Float         @default(0)
  total           Float
  
  // Shipping address (denormalized for order history)
  shippingFullName String       @map("shipping_full_name")
  shippingAddress  String       @map("shipping_address")
  shippingCity     String       @map("shipping_city")
  shippingState    String       @map("shipping_state")
  shippingZipCode  String       @map("shipping_zip_code")
  shippingCountry  String       @map("shipping_country") @default("United States")
  
  // Tracking
  trackingNumber  String?       @map("tracking_number")
  carrier         String?
  estimatedDelivery DateTime?   @map("estimated_delivery")

  // Relations
  user            User?         @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  variantId String?  @map("variant_id")
  
  // Denormalized product data (preserve order details)
  productName String @map("product_name")
  productImage String @map("product_image")
  productPrice Float @map("product_price")
  variantName String? @map("variant_name")
  
  quantity  Int
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  rating    Int      // 1-5
  title     String?
  comment   String?
  verified  Boolean  @default(false) // Whether the user purchased the product

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, productId])
  @@map("reviews")
}

model Address {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  fullName  String   @map("full_name")
  address   String
  city      String
  state     String
  zipCode   String   @map("zip_code")
  country   String   @default("United States")
  isDefault Boolean  @default(false) @map("is_default")

  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, productId])
  @@map("wishlist_items")
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
  partially_refunded
}